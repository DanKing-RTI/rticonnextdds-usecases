<?xml version="1.0"?>
<!-- 
Description
XML QoS Profile for RadarDataRaw

The QoS configuration of the DDS entities in the generated example is 
loaded from this file.

This file is used only when it is in the current working directory
or when the enviroment variable
NDDS_QOS_PROFILES is defined and points to this file.

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="C:/Program Files/RTI/5.0.0/ndds.5.0.0/scripts/../resource/rtiddsgen/../qos_profiles_5.0.0/schema/rti_dds_qos_profiles.xsd"
     version="5.0.0">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="RTIExampleQosLibrary">


      
      <qos_profile name="LowLatencyRadar" is_default_qos="true" base_name="MulticastNotAvailable">
            <!-- QoS used to configure the data writer created in the example code -->                
            <datawriter_qos>
                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>


              <!-- Reliably deliver the most recent radar update -->
              <history>
                <!-- If you need strict reliability, this should be changed to 
                     keep all history. -->
                <kind>KEEP_LAST_HISTORY_QOS</kind>
                <depth>1</depth>
              </history>

              <!-- Resource limits: to allow the application to specify
                   a different number of maximum tracks that can be handled
                   at once, the resource limits are being set in code. 
                   -->
              <!--<resource_limits>
                <max_samples>128</max_samples>
                <max_instances>64</max_instances>
                <max_samples_per_instance>2</max_samples_per_instance>
              </resource_limits>-->


              <!-- Send reliability heartbeats every 50 ms if there is a reader
                   waiting for data.  Send reliability heartbeats every 10 ms
                   if the queue is starting to fill and there is a reader 
                   waiting for data. (Note that no heartbeats are sent if there
                   are no readers waiting for data).  These heartbeats
                   determine how quickly data is re-sent if it was lost the
                   first time. -->
              <protocol>
                <rtps_reliable_writer>
                  <heartbeat_period>
                    <sec>0</sec>
                    <nanosec>50000000</nanosec>
                  </heartbeat_period>
                  <fast_heartbeat_period>
                    <sec>0</sec>
                    <nanosec>10000000</nanosec>
                  </fast_heartbeat_period>
                  <late_joiner_heartbeat_period>
                    <sec>0</sec>
                    <nanosec>50000000</nanosec>
                  </late_joiner_heartbeat_period>
                </rtps_reliable_writer>
              </protocol>
              
            </datawriter_qos>

            <!-- QoS used to configure the data reader created in the example code -->                
            <datareader_qos>

                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>

              <!-- Reliably deliver the most recent radar update -->
              <!-- If you need strict reliability, this should be changed to keep
               all history. -->
              <history>
                  <kind>KEEP_LAST_HISTORY_QOS</kind>
                  <depth>1</depth>
                </history>
              
              <!-- Resource limits: to allow the application to specify
                   a different number of maximum tracks that can be handled
                   at once, the resource limits are being set in code. 
                   -->
              <!--<resource_limits>
                <max_samples>128</max_samples>
                <max_instances>64</max_instances>
                <max_samples_per_instance>2</max_samples_per_instance>
              </resource_limits>-->

              <!-- Response delays in the DataReader are useful if there is a
                   large fanout of readers to writers - they prevent the 
                   readers from simultaneously resonding to heartbeats and 
                   flooding the writers.  With smaller numbers of readers the
                   delays can be set to zero.  -->
              <protocol>
                <rtps_reliable_reader>
                  <min_heartbeat_response_delay>
                    <sec>0</sec>
                    <nanosec>0</nanosec>
                  </min_heartbeat_response_delay>
                  <max_heartbeat_response_delay>
                    <sec>0</sec>
                    <nanosec>0</nanosec>
                  </max_heartbeat_response_delay>
                </rtps_reliable_reader>
              </protocol>

            </datareader_qos>

            <participant_qos>
                <participant_name>
                  <name>Low-Latency Radar Example</name>
                </participant_name>

            </participant_qos>
        </qos_profile>

      <qos_profile name="HighThroughputRadar" is_default_qos="true" base_name="MulticastNotAvailable">
        <!-- QoS used to configure the data writer created in the example code -->
        <datawriter_qos>

          <!-- To promote high throughput data at the expense of latency, enable batching on the 
               DataWriter -->
          <batch>
            <enable>true</enable>
            
            <!-- If the batch hits 1024 bytes, flush to the network -->
            <max_data_bytes>1024</max_data_bytes>
            <!-- You can decide what the maximum amount of additional latency
                 you are willing to sacrifice for better throughput. -->
            <max_flush_delay>
              <sec>0</sec>
              <nanosec>200000000</nanosec>
            </max_flush_delay>
          </batch>
          
          <reliability>
            <kind>RELIABLE_RELIABILITY_QOS</kind>
            <max_blocking_time>
              <sec>60</sec>
            </max_blocking_time>
          </reliability>

          <!-- Reliably deliver the _most recent_ radar update for each 
          flight -->
          <!-- If you need strict reliability, this should be changed to keep
               all history. -->
          <history>
            <kind>KEEP_LAST_HISTORY_QOS</kind>
            <depth>1</depth>
          </history>

          <!-- Resource limits: to allow the application to specify
                   a different number of maximum tracks that can be handled
                   at once, the resource limits are being set in code. 
                   -->
          <!--<resource_limits>
                <max_samples>128</max_samples>
                <max_instances>64</max_instances>
                <max_samples_per_instance>2</max_samples_per_instance>
              </resource_limits>-->

          <!-- Send reliability heartbeats every 50 ms if there is a reader
                   waiting for data.  Send reliability heartbeats every 10 ms
                   if the queue is starting to fill and there is a reader 
                   waiting for data. (Note that no heartbeats are sent if there
                   are no readers waiting for data).  These heartbeats
                   determine how quickly data is re-sent if it was lost the
                   first time. -->
          <protocol>
            <rtps_reliable_writer>
              <heartbeat_period>
                <sec>0</sec>
                <nanosec>50000000</nanosec>
              </heartbeat_period>
              <fast_heartbeat_period>
                <sec>0</sec>
                <nanosec>10000000</nanosec>
              </fast_heartbeat_period>
              <late_joiner_heartbeat_period>
                <sec>0</sec>
                <nanosec>50000000</nanosec>
              </late_joiner_heartbeat_period>
            </rtps_reliable_writer>
          </protocol>
          
        </datawriter_qos>

        <!-- QoS used to configure the data reader created in the example code -->
        <datareader_qos>

          <reliability>
            <kind>RELIABLE_RELIABILITY_QOS</kind>
          </reliability>

          <!-- Reliably deliver the most recent radar update -->
          <!-- If you need strict reliability, this should be changed to keep
               all history. -->
          <history>
            <kind>KEEP_LAST_HISTORY_QOS</kind>
            <depth>1</depth>
          </history>
          
          <!-- Resource limits: to allow the application to specify
                   a different number of maximum tracks that can be handled
                   at once, the resource limits are being set in code. 
                   -->
          <!--<resource_limits>
                <max_samples>128</max_samples>
                <max_instances>64</max_instances>
                <max_samples_per_instance>2</max_samples_per_instance>
              </resource_limits>-->

        </datareader_qos>

        <participant_qos>
          <participant_name>
            <name>High-Throughput Radar Example</name>
          </participant_name>
        </participant_qos>
      </qos_profile>


      
    </qos_library>
</dds>
